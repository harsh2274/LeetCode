class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>> arr[n] ;

        for(int i= 0 ; i<flights.size() ; i++){
            arr[flights[i][0]].push_back({flights[i][1],flights[i][2]}) ;
        }

        vector<int> vec(n,1e9) ;       
        vec[src] = 0 ;

        if(arr[src].size()==0){
            return(-1) ;
        }

        queue<pair<int,pair<int,int>>> q;        
        q.push({0,{0,src}}) ;

        while(!q.empty()){
            auto it = q.front() ;
            q.pop() ;
            int k_val = it.first ;
            int data = it.second.first ;
            int node = it.second.second ;

            if(k_val > k) continue ;

            for (int i = 0 ; i<arr[node].size() ; i++ ){
                if(vec[arr[node][i].first] > data + arr[node][i].second and k_val<=k){
                   vec[arr[node][i].first] = data + arr[node][i].second ;
                   q.push({k_val+1,{vec[arr[node][i].first] , arr[node][i].first }}) ;
                   cout << k_val+1 << " " << vec[arr[node][i].first] << " " << arr[node][i].first << endl  ;
                }  
            }

        } 
        if(vec[dst]==1e9){
            return(-1) ;
        } 
        return(vec[dst]) ;     
    }
};