class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int mat_siz = matrix.size()  ;
        vector <int> first_col ;
        
        for(int i = 0 ; i < mat_siz ; i++) {
            first_col.push_back(matrix[i][0]) ;
        }  

        int row = binary_search_row(first_col , target , 0 , matrix.size()-1) ;
        cout << "row : " << row << endl ;
        if (row==-1){
            return(0) ;
        }

        int col = binary_search_column(matrix[row] , target , 0 , matrix[0].size()-1) ;
        cout << "col : " << col  << endl ;
        if (col==-1){
            return(0) ; 
        }
        return(1) ;

    }

    int binary_search_row(vector<int> vec , int target , int low , int high) {
        for (int i = 0 ; i<vec.size() ; i++) {
            cout << vec[i] << " " ;
        }
        cout << endl ;
        int mid = (low + high)/2 ;
        cout << mid << endl ;
        if (low>high){
            return(-1) ;
        }
        if (mid==vec.size()-1){
            cout << "I am here" << endl ;
            return(mid) ;
        }

        cout << vec[mid] << "  " << target << "  " << vec[mid+1]<< endl ; 
        if (vec[mid]<=target && target < vec[mid+1] ){
            cout << "I am here 2 " << endl ;
            return(mid) ;
        }

        else if(vec[mid]>target){
            return(binary_search_row(vec,target , low , mid-1)) ;
        }
        else {
            return(binary_search_row(vec,target , mid+1 , high)) ;
        }
    }

    int binary_search_column(vector<int> vec , int target , int low , int high) {
        int mid = (low + high)/2 ;
        
        if (low>high) {
            return(-1) ;
        }

        if (vec[mid]==target){
            return(mid) ;
        }

        else if(vec[mid]>target){
            return(binary_search_column(vec,target , low , mid-1)) ;
        }

        else {
            return(binary_search_column(vec,target , mid+1 , high)) ;
        }
    }

    
};